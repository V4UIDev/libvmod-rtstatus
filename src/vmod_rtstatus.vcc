$Module rtstatus 3 rtstatus VMOD
DESCRIPTION
===========

A vmod that lets you query your Varnish server for a JSON object containing
counters.

visiting the URL /rtstatus.json on the Varnish server will produce an application/json
response of the following format::

    {
	"uptime" : "0+16:12:58",
	"uptime_sec": 58378.00,
	"hitrate": 30.93,
	"load": 2.73,
	"varnish_version" : "varnish-plus-4.1.2r1 revision 4d86388",
	"server_id": "ubuntu-14",
	"be_info":
		[
			{"server_name":"boot.default", "happy": 0, "bereq_tot": 13585163,"beresp_tot": 290463715,"pipe_hdrbytes": 0,"pipe_out": 0,"pipe_in": 0,"conn": 82094,"req": 82094},
			{"server_name":"boot.server1", "happy": 0, "bereq_tot": 0,"beresp_tot": 0,"pipe_hdrbytes": 0,"pipe_out": 0,"pipe_in": 0,"conn": 0,"req": 0},
		]
	"VBE.boot.default.happy": {"type": "VBE", "ident": "boot.default", "descr": "Happy health probes", "value": 0},
	"VBE.boot.default.bereq_hdrbytes": {"type": "VBE", "ident": "boot.default", "descr": "Request header bytes", "value": 13585163},
	"VBE.boot.default.bereq_bodybytes": {"type": "VBE", "ident": "boot.default", "descr": "Request body bytes", "value": 0},
    }

visiting the URL /rtstatus on the Varnish server will produce an application/javascript response.

$Function STRING rtstatus()
Description
        Returns a JSON object with relevant Varnish counters.
Example
        ::

                sub vcl_synt {
                        synthetic(rtstatus.rtstatus());
                }

$Function STRING html()
Description
        Reenders in a UI the JSON file obtained from the previous function.
Example
        ::

                sub vcl_synt {
                        synthetic(rtstatus.html());
		}

USAGE
=====

In your VCL you could then use this vmod along the following lines::

        vcl 4.0;
        import std;
        import rtstatus;

        sub vcl_recv {
                if (req.url ~ "/rtstatus.json") {
                        return(synth(700, "OK"));
                }
                if (req.url ~ "/rtstatus") {
                        return(synth(800, "OK"));
                }
        }
        sub vcl_synth {
                if (resp.status == 700){
                        set resp.status = 200;
                        set resp.http.Content-Type = "text/plain; charset=utf-8";
                        synthetic(rtstatus.rtstatus());
                        return (deliver);
                }
                if (resp.status == 800) {
                        set resp.status = 200;
                        set resp.http.Content-Type = "text/html; charset=utf-8";
                        synthetic(rtstatus.html());
                        return (deliver);
                }
        }


NUMBERS
=======

Varnish version
	Varnish version installed on your server.

Varnish uptime
	Child uptime.

Hit ratio
	Absolute hitrate ratio. It is evaluated as: (n_hit) / (n_hit + n_miss).
	Note that uptime is not taken into considaration for this counter.

Avg hitrate
	Avarage hitrate since uptime. It is evaluated as: ((n_hit) / (n_hit + n_miss)) / uptime.

Avg load
	Avarage load since uptime. It is evaluated as: n_requests / uptime.



Backend overview
----------------

Num
	Total number of defined backends.

Req
	Backend requests made.

Conn
	Successful backend connections.

Unhealthy
	Backend connections not attempted.

Busy
	Too many connections to the same backend.

Fail
	Backend connections failures.

Reuse
	Reused backend connections.

Recycle
	Recycled backend connections.

Retry
	Retried backend connections.




Backend details
---------------

Backend name
	Backend name.

Probe health
	Health evaluated by probes.
	If probe is not set the backend is marked as sick.

Req KB/s
	KBytes per second sent to the backend by Varnish.

Requests
	Total amount of bytes sent to the backend by Varnish.

Resp KB/s
	KBytes per second sent to Varnish by the backend.

Responses
	Total amount of bytes sent to Varnish by the backend.

Pipe hdr
	Total amount of piped header bytes.

Pipe out
	Total amount of piped bytes to the backend.

Pipe in
	Total amount of piped bytes from the backend.

Conn
	Concurrent connections to backend.

Req
	Number of requests sent to the backend.

